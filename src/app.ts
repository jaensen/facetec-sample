import { Config } from "../../../Config";
import { FaceTecSDK } from "../../../core-sdk/FaceTecSDK.js/FaceTecSDK";
import { EnrollmentProcessor } from "./EnrollmentProcessor";
import { SampleAppUtilities } from "./utilities/SampleAppUtilities";
import { ThemeHelpers } from "./utilities/ThemeHelpers";
import { AdditionalScreens } from "./utilities/AdditionalScreens";

export var SampleApp = (function() {
  window.onload = function() {
    SampleAppUtilities.formatUIForDevice();

    // Set the directory path for other FaceTec Browser SDK Resources.
    FaceTecSDK.setResourceDirectory("../../core-sdk/FaceTecSDK.js/resources");

    // Set the directory path for required FaceTec Browser SDK images.
    FaceTecSDK.setImagesDirectory("../../core-sdk/FaceTec_images");

    // Set your FaceTec Device SDK Customizations.
    ThemeHelpers.setAppTheme(ThemeHelpers.getCurrentTheme());

    // Initialize FaceTec Browser SDK and configure the UI features.
    Config.initializeFromAutogeneratedConfig(FaceTecSDK, function(initializedSuccessfully: boolean) {
      if(initializedSuccessfully) {
        SampleAppUtilities.enableControlButtons();

        AdditionalScreens.setServerUpgradeStyling(
          document.getElementById("controls")!,
          () => AdditionalScreens.exitAdditionalScreen(SampleAppUtilities.showMainUI));
      }
      SampleAppUtilities.displayStatus(FaceTecSDK.getFriendlyDescriptionForFaceTecSDKStatus(FaceTecSDK.getStatus()));
    });
  };

  async function checkUniqueness() {
    const groupName = "Signups";
    const sessionToken = await getSessionToken();
    const randomId = generateRandomId();

    const enrollmentProcessor = new EnrollmentProcessor(sessionToken, groupName, randomId);

    enrollmentProcessor.onSuccess = async (sessionResult) => {
      console.log("Enrollment process onSuccess:", sessionResult)

      const searchResult = await fetch(Config.BaseURL + `/3d-db/search`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Device-Key": Config.DeviceKeyIdentifier,
          "X-User-Agent": FaceTecSDK.createFaceTecAPIUserAgentString(sessionResult.sessionId as string)
        },
        body: JSON.stringify({
          externalDatabaseRefID: randomId,
          groupName: groupName,
          minMatchLevel: 10
        })
      });

      const searchResultJson = await searchResult.json();
      console.log(searchResultJson);

      if (searchResultJson.success && searchResultJson.results?.length) {
        for (let result of searchResultJson.results) {
          console.log(`Found ${result.identifier} in 3ddb. Already verified.`);
          return;
        }
      } else {
        console.log(`Couldn't find a matching face in the 3ddb. Enrolling ..`);

        const enrollResult = await fetch(Config.BaseURL + `/3d-db/enroll`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Device-Key": Config.DeviceKeyIdentifier,
            "X-User-Agent": FaceTecSDK.createFaceTecAPIUserAgentString(sessionResult.sessionId as string)
          },
          body: JSON.stringify({
            externalDatabaseRefID: randomId,
            groupName: groupName
          })
        });

        const enrollResultJson = await enrollResult.json();
        if (enrollResultJson.success) {
          console.log(`Cool. You're now verified!`)
        } else {
          console.log(`Verification failed.`)
        }
      }
    }

    enrollmentProcessor.onError = (a) => {
      console.log("Enrollment process onError:", a)
    }
  }

  async function getSessionToken() {
    const sessionResult = await fetch(Config.BaseURL + "/session-token", {
      headers: {
        "X-Device-Key": Config.DeviceKeyIdentifier,
        "X-User-Agent": FaceTecSDK.createFaceTecAPIUserAgentString("")
      }
    });

    const sessionResultJson = await sessionResult.json();
    const sessionToken:string = sessionResultJson.sessionToken;

    SampleAppUtilities.hideLoadingSessionToken();

    return sessionToken;
  }

  function generateRandomId() {
    const buffer = new Uint8Array(16);
    crypto.getRandomValues(buffer)
    return Array.prototype.map.call(buffer, x => ('00' + x.toString(16)).slice(-2)).join('');
  }

  return {
    checkUniqueness
  };
})();
